file = _{ SOI ~ top_level* ~ EOI }

top_level = _{ struct | enum | func | import | extern | constant | static }

import = { vis ~ kw_import ~ path ~ ";" }
extern = { vis ~ kw_extern ~ kw_import ~ string ~ ";" }

constant = { vis ~ kw_constant ~ ty ~ ident ~ "=" ~ expression ~ ";"}
static = { vis ~ kw_static ~ ty ~ ident ~ "=" ~ expression ~ ";"}

struct        = { vis ~ kw_struct ~ ident ~ "{" ~ struct_fields ~ "}" }
struct_fields = _{ (struct_field ~ ("," ~ struct_field)* ~ ","?)? }
struct_field  = { vis ~ ty ~ ident }

union        = { vis ~ kw_union ~ ident ~ "{" ~ struct_fields ~ "}" }

enum        = { vis ~ kw_enum ~ enum_repr ~ ident ~ "{" ~ enum_fields ~ "}" }
enum_fields = _{ (enum_field ~ ("," ~ enum_field)* ~ ","?)? }
enum_field  = { ident ~ ("=" ~ sint)? }
enum_repr   = { "uint8" | "uint16" | "uint32" | "uint64" | "int8" | "int16" | "int32" | "int64" | "uptr" | "ptr" }

func      = { vis ~ maybe_const ~ maybe_inline ~ kw_func ~ ty ~ path ~ "(" ~ func_args ~ ")" ~ block }
func_args = { (func_arg ~ ("," ~ func_arg)* ~ ","?)? }
func_arg  = { ty ~ ident }

vis          = { public | internal | "" }
maybe_const  = { const_marker | "" }
maybe_inline  = { inline_marker | "" }
const_marker = { kw_constant }
inline_marker = { kw_inline }
public       = { kw_pub }
internal     = { kw_internal }

block     = { "{" ~ statement* ~ "}" }
statement = { if | for | while | forever | (line_stmt ~ ";") }

if         = { if_top ~ else_ifs ~ else_maybe }
if_top     = { kw_if ~ expression ~ block }
else_ifs   = { else_if* }
else_if    = { kw_else ~ kw_if ~ expression ~ block }
else_maybe = { else? }
else       = { kw_else ~ block }

for     = { kw_for ~ line_stmt ~ ";" ~ expression? ~ ";" ~ expression? ~ block }
while   = { kw_while ~ expression ~ block }
forever = { kw_forever ~ block }

line_stmt = _{ break | continue | return | drop | init | expression | "" }
break     = { kw_break }
continue  = { kw_continue }
return    = { kw_return ~ expression? }
drop      = { kw_drop ~ expression }
init      = { ty ~ ident ~ ("=" ~ expression)? }

expression_list  =  { (expression ~ ("," ~ expression)* ~ ","?)? }
expression = _{ assign_exp }

assign_exp  = { ternary_exp ~ (assign ~ ternary_exp)* }
ternary_exp  = { log_or_exp ~ (ternary ~ log_or_exp)* }
log_or_exp  = { log_and_exp ~ (log_or ~ log_and_exp)* }
log_and_exp = { bit_or_exp ~ (log_and ~ bit_or_exp)* }
bit_or_exp  = { bit_xor_exp ~ (bit_or ~ bit_xor_exp)* }
bit_xor_exp = { bit_and_exp ~ (bit_xor ~ bit_and_exp)* }
bit_and_exp = { eq_exp ~ (bit_and ~ eq_exp)* }
eq_exp      = { rel_exp ~ (eq ~ rel_exp)* }
rel_exp     = { shift_exp ~ (rel ~ shift_exp)* }
shift_exp   = { sum_exp ~ (shift ~ sum_exp)* }
sum_exp     = { prod_exp ~ (sum ~ prod_exp)* }
prod_exp    = { access_exp ~ (prod ~ access_exp)* }
access_exp  = { post_exp ~ (access ~ post_exp)* }
post_exp    = { pref_exp ~ post* }
pref_exp    = { pref* ~ (atom | "(" ~ expression ~ ")") }

assign  = _{ set }
set     =  { "=" }
ternary = _{ if_infx }
if_infx =  { kw_if ~ expression ~ kw_else }
log_or  = _{ logor }
logor   =  { "or" }
log_and = _{ logand }
logand  =  { "and" }
bit_or  = _{ bitor }
bitor   =  { "|" }
bit_and = _{ bitand }
bitand  =  { "&" }
bit_xor = _{ bitxor }
bitxor  =  { "^" | "xor" }
eq      = _{ equ | neq }
equ     =  { "==" }
neq     =  { "!=" | "<>" }
rel     = _{ lt | gt | leq | geq | space }
lt      =  { "<" }
gt      =  { ">" }
leq     =  { "<=" }
geq     =  { ">=" }
space   =  { "<=>" }
shift   = _{ shl | shr }
shl     =  { "<<" }
shr     =  { ">>" }
sum     = _{ add | sub }
add     =  { "+" }
sub     =  { "-" }
prod    = _{ mul | div | mod }
mul     =  { "*" }
div     =  { "/" }
mod     =  { "%" }
pref    = _{ not | neg | ref | deref }
not     =  { "!" | "not" }
neg     =  { "-" }
ref     =  { "&" }
deref   =  { "*" }
access  = _{ member }
member  =  { "." }
post    = _{ call | index | cast }
call    =  { "(" ~ expression_list ~ ")" }
index   =  { "[" ~ expression ~ "]" }
cast    =  { kw_as ~ ty }

atom = { size | path | alloc | int | float | string | "[" ~ expression_list ~ "]" }

size  = { kw_size ~ ty }
path  = { ident ~ ("::" ~ ident)* }
alloc = { kw_alloc ~ ty }

sint = {(neg | pos)? ~ int}
pos = {"+"}
int = _{ hex_int | bin_int | oct_int | dec_int | char_ }

dec_int = @{ ASCII_DIGIT+ }
hex_int = @{ "0x" ~ ASCII_HEX_DIGIT+ }
bin_int = @{ "0b" ~ ASCII_BIN_DIGIT+ }
oct_int = @{ "0o" ~ ASCII_OCT_DIGIT+ }

char_ = _{"'" ~ char ~ "'"}
char = {("\\" | !"\'") ~ ANY}

float    = @{ fl_both | fl_fract | fl_int | fl_bare }
fl_both  =  _{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ fl_exp? }
fl_fract =  _{ "." ~ ASCII_DIGIT+ ~ fl_exp? }
fl_int   =  _{ ASCII_DIGIT+ ~ "." ~ fl_exp? }
fl_bare  =  _{ ASCII_DIGIT+ ~ fl_exp }
fl_exp   =  _{ ("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }

string       = _{ "\"" ~ string_inner ~ "\"" }
string_inner =  { (("\\" | !"\"") ~ ANY)* }

ty     = _{ ptr_ty | arr_ty | idt_ty }
ptr_ty =  { "*" ~ ty }
arr_ty =  { "[" ~ ty ~ ";" ~ int ~ "]" }
idt_ty =  { ident }
ident  = @{ !keyword ~ (ASCII_ALPHANUMERIC | "_")+ }

keyword     = _{
    kw_struct
  | kw_enum
  | kw_union
  | kw_func
  | kw_static
  | kw_constant
  | kw_inline
  | kw_if
  | kw_else
  | kw_for
  | kw_while
  | kw_forever
  | kw_break
  | kw_continue
  | kw_return
  | kw_pub
  | kw_internal
  | kw_alloc
  | kw_drop
  | kw_as
  | kw_size
  | kw_import
  | kw_extern
}
kw_struct   = _{ "struct" }
kw_enum     = _{ "enum" }
kw_union    = _{ "union" }
kw_static   = _{ "static" }
kw_constant = _{ "constant" }
kw_inline   = _{ "inline" }
kw_func     = _{ "function" }
kw_if       = _{ "if" }
kw_else     = _{ "else" }
kw_for      = _{ "for" }
kw_while    = _{ "while" }
kw_forever  = _{ "forever" }
kw_break    = _{ "break" }
kw_continue = _{ "continue" }
kw_return   = _{ "return" }
kw_pub      = _{ "public" }
kw_internal = _{ "internal" }
kw_alloc    = _{ "alloc" }
kw_drop     = _{ "drop" }
kw_as       = _{ "as" }
kw_size     = _{ "size" }
kw_import   = _{ "import" }
kw_extern   = _{ "external" }

WHITESPACE = _{ " " | "\r" | "\t" | "\n" }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* | "/" ~ PUSH("*"*) ~ (!(PEEK ~ "/") ~ ANY) ~ POP ~ "/" }
